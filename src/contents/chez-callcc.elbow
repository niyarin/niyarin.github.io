((*contents-date* "2019-12-03")
 (*contents-title* "Chezのcall/cc論文の紹介(のようなもの)")
 (*contents-tags* ("Scheme"))
 (*contents-body* 
     (begin
        `(div
          (a (@ (href "https://qiita.com/advent-calendar/2019/lisp")) "Lisp Advent Calendar 2019") " の4日目の記事です。" (br)
          "今年Scheme界隈での大きな出来事の一つはChezがRacketのコアに導入されたことです。"
          "なのでChez関連のなにかの記事を書こうと思いまして、Chezのcall/ccの実装論文の"
          (a (@ (href "https://www.cs.indiana.edu/~dyb/pubs/stack.pdf")) "stack.pdf")
          "の紹介をします。"
          "継続実装としては、スタックのコピーやCPS変換といった方針がありますが、Chezはスタックコピーする方を採用しています。"
          "通常継続のコピーはスタックの長さに依存した時間が必要だったのが、Chezの実装だとコピーを行わないため、定数時間で継続の作成ができます。"

          (h3 "スタックコピー型の継続実装")
          "通常のプログラム言語の場合、関数を呼び出した時スタックにリターンアドレスやローカル変数が含まれたフレームがプッシュされ、リターン時にポップされた後はそのフレームは不要になります。"
          "Schemeの場合は、継続によって一度リターンした後も再度そこから実行することが要求されるため、なにかしらの手段でスタックを過去の状態に復元する必要があります。"
          "単純な実現方法のひとつがcall/ccした時にスタックの情報をヒープにコピーしておき、継続の呼び出し時にヒープからスタックにコピーするというやりかたです。"
          "Chezはこの方法を改良してcall/cc時のコピーを定数時間にして、呼び出し時のスタック消費の大量消費を押さえるような実装になっています。"
          (h3 "典型的なStackのモデル")
          (h4 "普通のStack")
          "vectorのような連続でメモリ上配置されるデータ構造でStackの実装すると、pushしてpopしてpushすると最初にpushしたデータをおいてある領域が後にpushしたデータで上書きされます。"
          (br)
          ,(if (null? *contents-root-relative-path*)
             ""
             `(img (@ (src ,(string-append *contents-root-relative-path* "/contents_resources/201912/vector-stack.png"))
                      (width "360px")
                      (style "border:solid 1px;margin:10px;"))))
          (br)

          (h4 "Listで実装したStack")
          "listでStackの実装すると、pushしてpopしてpushしてもpush時に新しい領域を確保してそこに書き込むので元のセルは破壊されません。"
          (br)

         ,(if (null? *contents-root-relative-path*)
                      ""
                      `(img (@ (src ,(string-append *contents-root-relative-path* "/contents_resources/201912/list-stack.png"))
                               (width "360px")
                               (style "border:solid 1px;margin:10px;"))))(br)


          "ただpopされたペアが浮いてHeapに残留しているため不要になれば回収する必要があります。また、セルの確保時に連続したメモリに配置される保証はないため、局所性が下がってしまうという欠点(キャッシュとかがあまり有効でなくなる)もあります。"

          "listでのスタック管理で継続を実装すると継続確保と呼び出しでのコピーが発生しないので、継続周りだけならvectorのものよりも優れてはいます。ただ、listでのスタック管理はすべての手続き呼び出しで前述のオーバーヘッドがかかるのでvectorのものより結果的に遅くなります。"

          (h3 "ChezのStackの構造")
          "ChezのStackは上2つの要素を複合させたようなモデルで、
           固定長のスタック(スタックセグメント)をポインタでつないでいます。"
           (br)
         ,(if (null? *contents-root-relative-path*)
                      ""
                      `(img (@ (src ,(string-append *contents-root-relative-path* "/contents_resources/201912/chez-stack-model.png"))
                               (width "360px")
                               (style "border:solid 1px;margin:10px;"))))(br)

          (h3 "継続の確保")
          "継続の作成は現在のスタックセグメントの使用済み部分を切り離して、その切り離した部分から下を使用不可にするだけです。"
          "この下の凍結された使用不可部分が継続オブジェクトになります。"
          "そして切り離したスタックセグメントの未使用部分(切り離した部分から上)を新しいスタックセグメントとします。"
          "当然、新しいスタックセグメントは切り離した分だけ元のサイズから小さくなります。"
          "何度も継続を作成してカレントスタックがとても小さくなれば、最終的にサイズがとても小さくなり新しいスタックのアロケーションのコストがかかります。"(br)

        ,(if (null? *contents-root-relative-path*)
                      ""
                      `(img (@ (src ,(string-append *contents-root-relative-path* "/contents_resources/201912/chez-call-cc.png"))
                               (width "360px")
                               (style "border:solid 1px;margin:10px;"))))(br)

          (h3 "継続の呼び出し")
          "継続の呼び出しは基本的には凍結したスタックセグメントを現在のスタックセグメントに移すだけなのですが、基準値と現在のスタックサイズとの比較で挙動が少し変わります。"
          

          ,(let ((indent (lambda (s)
                  `(div (@ (style "margin-left:40px;"))
                        ,s))))
             `(ul
               (li (@ (style "margin-bottom:10px"))
                   "1.凍結したスタックセグメントが基準値以下かつ現在のスタックセグメントのサイズより小さい"
                   ,(indent "→ そのまま現在のスタックセグメントにコピーする。"))
               (li (@ (style "margin-bottom:10px"))
                   "2.凍結したスタックセグメントが基準値以下かつ現在のスタックセグメントのサイズより大きい
                   → 新しくスタックセグメントをアロケートしてそこにコピーする。")
               (li (@ (style "margin-bottom:10px"))
                "3.凍結したスタックセグメントが基準値より大きい場合
                   → 凍結したスタックセグメントを基準値以下になるように分割して、その部分だけコピーする")))


           "このスタック管理では呼び出し時に単純なスタックコピーでは起こらない"(strong "暗黙の継続呼び出し")"でのオーバーヘッドが生じるケースがあります。"
           "暗黙の継続呼び出しとは、下のSchemeコードのようにcall/cc内で確保した継続を呼び出さなかった場合、その返り値がcall/ccの結果として戻りますが、"
          (pre "(call/cc (lambda (x) (some-fun x)))")
          "このときにcall/ccで取り出した継続を暗黙のうちに呼び出す操作が必要になります。"
          "理由は単純でそのまま脱出すると継続の補足時に凍結した、変更してはいけない領域を破壊する可能性があるためです。"
          "単純なスタック管理の場合ではスタックのコピーをヒープにとってあるため、そのままオリジナルを破壊してしまっても問題にはなりませんが、Chezの方針だとコピーを取らないためオリジナルをコピーして使う必要があります。"


          (h3 "まとめ")
          "この論文の実装を使えば、局所性を確保できてゴミがあまりでなくて通常の関数呼び出しでのオーバーヘッドが少ない上に継続オブジェクトの取り出しが定数時間でできる処理系が書けますよ!"

          (h3 "このあとに読みたい論文")
          "今回読んだ論文は続きがあって、Chezには継続の呼び出しを1回限定にしたcall/1ccという手続きがあってそれを含めた継続の扱いについて書かれた"
          (a (@ (href "https://www.cs.indiana.edu/~dyb/pubs/call1cc.pdf")) "call1cc.pdf")
          "というものがあります"


                ))))
